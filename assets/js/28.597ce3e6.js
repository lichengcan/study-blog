(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{451:function(n,t,e){"use strict";e.r(t);var a=e(2),r=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"geojson-wkt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#geojson-wkt"}},[n._v("#")]),n._v(" GeoJson-wkt")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!--geojson wkt格式转换依赖--\x3e\n<dependency>\n    <groupId>org.wololo</groupId>\n    <artifactId>jts2geojson</artifactId>\n    <version>0.17.0</version>\n</dependency>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import com.fasterxml.jackson.databind.ObjectMapper;\nimport org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.io.WKTReader;\nimport org.locationtech.jts.io.WKTWriter;\nimport org.wololo.geojson.GeoJSON;\nimport org.wololo.jts2geojson.GeoJSONReader;\nimport org.wololo.jts2geojson.GeoJSONWriter;\nimport java.io.IOException;\n\n/**\n * @author lichengcan\n * @date 2022/7/15 16:51\n * @description geojson和wkt格式转换工具类\n */\npublic class GeoJsonConvertWktUtil {\n    /**\n     * geojson 转 geometry\n     *\n     * @param geojson\n     * @return\n     * @throws Exception\n     */\n    public static Geometry geojson2Geometry(String geojson) throws Exception {\n        GeoJSONReader reader = new GeoJSONReader();\n        Geometry geometry = reader.read(geojson);\n        return geometry;\n    }\n\n\n    /**\n     * geometry 转 geojson\n     *\n     * @param geometry\n     * @return\n     * @throws Exception\n     */\n    public static String geometry2Geojson(Geometry geometry) throws Exception {\n        GeoJSONWriter writer = new GeoJSONWriter();\n        GeoJSON json = writer.write(geometry);\n        return json.toString();\n    }\n\n\n    /**\n     * wkt 转 geometry\n     *\n     * @param wkt\n     * @return\n     * @throws Exception\n     */\n    public static Geometry wkt2Geometry(String wkt) throws Exception {\n        WKTReader reader = new WKTReader();\n        return reader.read(wkt);\n    }\n\n    /**\n     * geometry 转 wkt\n     *\n     * @param geometry\n     * @return\n     * @throws Exception\n     */\n    public static String geometry2Wkt(Geometry geometry) throws Exception {\n        WKTWriter writer = new WKTWriter();\n        return writer.write(geometry);\n    }\n\n\n    /**\n     * geojson 转 wkt\n     *\n     * @param geojson\n     * @return\n     * @throws Exception\n     */\n    public static String geojson2Wkt(String geojson) throws Exception {\n        Geometry geometry = geojson2Geometry(geojson);\n        return geometry2Wkt(geometry);\n    }\n\n    /**\n     * wkt 转 geojson\n     *\n     * @param wkt\n     * @return\n     * @throws Exception\n     */\n    public static String wkt2Geojson(String wkt) throws Exception {\n        Geometry geometry = wkt2Geometry(wkt);\n        return geometry2Geojson(geometry);\n    }\n\n    /**\n     * obj 转 json\n     *\n     * @param obj\n     * @param <T>\n     * @return\n     */\n    public static <T> String obj2StringPretty(T obj) {\n        ObjectMapper mapper = new ObjectMapper();\n        if (obj == null) {\n            return null;\n        }\n        try {\n            return obj instanceof String ? (String) obj : mapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    /**\n     * json 转 obj\n     *\n     * @param str\n     * @param clazz\n     * @param <T>\n     * @return\n     */\n    public static <T> T string2Obj(String str, Class<T> clazz) {\n        ObjectMapper mapper = new ObjectMapper();\n        if (isEmpty(str) || clazz == null) {\n            return null;\n        }\n        try {\n            return clazz.equals(String.class) ? (T) str : mapper.readValue(str, clazz);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    /**\n     * 为空判断\n     *\n     * @param str\n     * @return\n     */\n    private static boolean isEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n}\n\n")])])]),t("h3",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),t("p",[n._v("geojson---\x3ewkt读取jeojson文件，并插入数据库")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@RestController\n@RequestMapping("/shimen")\npublic class ShimenDownController {\n\n    @Autowired\n    ShimenTownService shimenTownService;\n\n    @RequestMapping("/insertShimenDown")\n    public ResultMap insertShimenDown() throws Exception {\n        //读取文件\n        File file=new File("D:\\\\documents\\\\work\\\\shimen_town_R_84_R(1).geojson");\n        //读取文件中的数据保存在String\n        String GeoJsonData= null;\n        try {\n            GeoJsonData = FileUtils.readFileToString(file,"UTF-8");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //将所有对象都放到集合中，再一次性插入数据库\n        List<ShimenTown> shimenTowns = new ArrayList<>();\n\n        //将JeoJson格式转换枨 map\n        Map map =  JSONObject.parseObject(GeoJsonData.trim());\n        //获取key为 features的值\n        List<Map> features = (List<Map>) map.get("features");\n        //resultMapList 用来封装最终需要的数据\n        List<Map> resultMapList = new ArrayList<>();\n        //遍历features中的map\n        for (Map feature :features){\n            Map geometry = (Map) feature.get("geometry");\n            String geometryStr = JsonUtils.toJson(geometry);\n            String wkt = geojson2Wkt(geometryStr);\n            Map properties = (Map) feature.get("properties");\n            //封装最小化插入数据库的对象,这里的对象一定要放在循环里面，不然在循环过程中会替换上一次的值\n            //ArrayList集合里存的是一个对象的引用。当我们改变obj时，之前添加的数据都会被改变\n            ShimenTown shimenTown = new ShimenTown();\n            //封装需要插入数据库的数据\n            shimenTown.setBSM((String) properties.get("BSM"));\n            shimenTown.setWkt(wkt);\n            shimenTown.setXZQDM((String) properties.get("XZQDM"));\n            shimenTown.setXZQMC((String) properties.get("XZQMC"));\n            shimenTowns.add(shimenTown);\n        }\n        //一次性插入数据库\n        return shimenTownService.insertShimenDown(shimenTowns);\n    }\n')])])]),t("h2",{attrs:{id:"java-excel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-excel"}},[n._v("#")]),n._v(" Java-Excel")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!--excel操作包--\x3e\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi</artifactId>\n    <version>4.1.2</version>\n</dependency>\n\x3c!--xlsx(07)--\x3e\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>4.1.2</version>\n</dependency>\n\x3c!--时间格式化工具--\x3e\n<dependency>\n    <groupId>joda-time</groupId>\n    <artifactId>joda-time</artifactId>\n    <version>2.10.6</version>\n</dependency>\n\n")])])]),t("h3",{attrs:{id:"示例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package com.dataojo.utils;\n\nimport com.dataojo.model.entity.CityLocation;\nimport org.apache.poi.hssf.usermodel.HSSFDateUtil;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.joda.time.DateTime;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * @author lichengcan\n * @date 2022/7/12 16:01\n * @description excel操作工具类\n */\npublic class ReadExcelXssf {\n\n    public static String PATH = "D:\\\\documents\\\\work\\\\";\n\n    public static void main(String[] args) throws Exception {\n        ReadExcelXssf readExcelXssf = new ReadExcelXssf();\n       // readExcelXssf.readExcel();\n    }\n\n    /**\n     * 将Excel数据读取出来，封装到对象中\n     * @return\n     * @throws IOException\n     */\n    public List<CityLocation> readExcel() throws IOException {\n        List<CityLocation> resultList = new ArrayList<>();\n        CityLocation cityLocation = new CityLocation();\n        //获取文件流\n        FileInputStream inputStream = new FileInputStream(PATH + "成都轨迹叠加.xlsx");\n\n        //1.创建工作簿,使用excel能操作的这边都看看操作\n        Workbook workbook = new XSSFWorkbook(inputStream);\n        //2.得到表\n        Sheet sheet = workbook.getSheetAt(0);\n        //3.得到行\n        int rowLength = sheet.getLastRowNum();\n        int columnLength = sheet.getRow(0).getPhysicalNumberOfCells();\n        for (int i = 0; i < rowLength; i++) {\n            for (int j = 0; j < columnLength; j++) {\n\n                Row row = sheet.getRow(i);\n                Cell cell = row.getCell(j);\n                if(j==0){\n                    String value = getValue(cell);\n                    cityLocation.setParentId(value);\n                }\n                if(j==1){\n                    String value = getValue(cell);\n                    cityLocation.setLongitude(value);\n                }\n                if(j==2){\n                    String value = getValue(cell);\n                    cityLocation.setLatitude(value);\n                }\n                if(j==3){\n                    String value = getValue(cell);\n                    cityLocation.setCreateTime(value);\n                }\n            }\n            //System.out.println(cityLocation);\n            resultList.add(cityLocation);\n        }\n        inputStream.close();\n        return resultList;\n    }\n\n    public static String getValue(Cell cell) {\n        String cellValue = "";\n        //匹配类型数据\n        if (cell != null) {\n            CellType cellType = cell.getCellType();\n            switch (cellType) {\n                case STRING: //字符串\n                    cellValue = cell.getStringCellValue();\n                    break;\n                case BOOLEAN: //布尔类型\n                    cellValue = String.valueOf(cell.getBooleanCellValue());\n                    break;\n                case BLANK: //空\n                    break;\n                case NUMERIC: //数字（日期、普通数字）\n                    if (HSSFDateUtil.isCellDateFormatted(cell)) { //日期\n                        Date date = cell.getDateCellValue();\n                        cellValue = new DateTime(date).toString("yyyy-MM-dd");\n                    } else {\n                        //不是日期格式，防止数字过长\n                        cell.setCellType(CellType.STRING);\n                        cellValue = cell.toString();\n                    }\n                    break;\n                case ERROR:\n                    break;\n                //default:\n            }\n        }\n        return cellValue;\n    }\n\n    /**\n     * 将数据输出到Excel\n     * @param cityLocations\n     * @throws IOException\n     */\n    public void printExcel(List<CityLocation> cityLocations) throws IOException {\n        String PATH = "D:\\\\documents\\\\work\\\\";\n\n        //时间\n        long begin = System.currentTimeMillis();\n\n        //创建一个工作簿\n        Workbook workbook = new XSSFWorkbook();\n        //创建表\n        Sheet sheet = workbook.createSheet();\n        //写入数据\n        for (int rowNumber = 0; rowNumber < cityLocations.size(); rowNumber++) {\n            CityLocation cityLocation = cityLocations.get(rowNumber);\n            Row row = sheet.createRow(rowNumber);\n            for (int cellNumber = 0; cellNumber <= 3; cellNumber++) {\n                Cell cell = row.createCell(cellNumber);\n                if(cellNumber==0){\n                    cell.setCellValue(cityLocation.getParentId());\n                }\n                if(cellNumber==1){\n                    cell.setCellValue(cityLocation.getLongitude());\n                }\n                if(cellNumber==2){\n                    cell.setCellValue(cityLocation.getLatitude());\n                }\n                if(cellNumber==3){\n                    cell.setCellValue(cityLocation.getCreateTime());\n                }\n            }\n        }\n        System.out.println("over");\n\n        FileOutputStream fileOutputStream = new FileOutputStream(PATH + "123.xlsx");\n        workbook.write(fileOutputStream);\n        fileOutputStream.close();\n        long end = System.currentTimeMillis();\n        System.out.println((double) (end - begin) / 1000);\n\n    }\n\n}\nexcel表中数据：\nparentId\tlongitude\tlatitude\tcreateTime\n1\t104.137318\t30.668151\t2020/12/2 0:00\n1\t104.1379449\t30.66865906\t2020/12/2 0:00\n1\t104.139973\t30.67057863\t2020/12/2 0:01\n1\t104.1401576\t30.67075134\t2020/12/2 0:01\n1\t104.1402878\t30.67085149\t2020/12/2 0:02\n1\t104.1403679\t30.67092157\t2020/12/2 0:02\n')])])]),t("h2",{attrs:{id:"java-时间戳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-时间戳"}},[n._v("#")]),n._v(" Java-时间戳")]),n._v(" "),t("blockquote",[t("p",[n._v("我们可以使用 util 包的 "),t("code",[n._v("Date")]),n._v(" 类来获取当前时间戳。要以 "),t("code",[n._v("yyyy.MM.dd")]),n._v(" 格式格式化时间戳，我们可以使用 "),t("code",[n._v("SimpleDateFormat")]),n._v(" 类。请参见下面的示例。")])]),n._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("import")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[n._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("text"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SimpleDateFormat")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("import")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[n._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Date")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SimpleTesting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SimpleDateFormat")]),n._v(" date "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SimpleDateFormat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"yyyy.MM.dd HH:mm:ss"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),n._v(" timeStamp "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Current Time Stamp: "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v("timeStamp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("h2",{attrs:{id:"ip地址来源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ip地址来源"}},[n._v("#")]),n._v(" IP地址来源")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1.导入工具类\n  <dependency>\n        <groupId>org.lionsoul</groupId>\n        <artifactId>ip2region</artifactId>\n        <version>1.7</version>\n    </dependency>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import org.apache.commons.io.FileUtils;\nimport org.lionsoul.ip2region.DataBlock;\nimport org.lionsoul.ip2region.DbConfig;\nimport org.lionsoul.ip2region.DbSearcher;\nimport org.lionsoul.ip2region.Util;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.lang.reflect.Method;\n\n/**\n * @author MrBird\n */\npublic class AddressUtil {\n\n    private static Logger log = LoggerFactory.getLogger(AddressUtil.class);\n\n    public static String getCityInfo(String ip){\n\n        File file;\n        try {\n            //db\n            String dbPath = AddressUtil.class.getResource("/ip2region/ip2region.db").getPath();\n             file= new File(dbPath);\n            if (file.exists() == false) {\n                String tmpDir = System.getProperties().getProperty("java.io.tmpdir");\n                dbPath = tmpDir + "ip.db";\n                file = new File(dbPath);\n                FileUtils.copyInputStreamToFile(AddressUtil.class.getClassLoader().getResourceAsStream("classpath:ip2region/ip2region.db"), file);\n            }\n\n            //查询算法\n            int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree\n            //DbSearcher.BINARY_ALGORITHM //Binary\n            //DbSearcher.MEMORY_ALGORITYM //Memory\n            try {\n                DbConfig config = new DbConfig();\n                DbSearcher searcher = new DbSearcher(config, dbPath);\n\n                //define the method\n                Method method = null;\n                switch (algorithm) {\n                    case DbSearcher.BTREE_ALGORITHM:\n                        method = searcher.getClass().getMethod("btreeSearch", String.class);\n                        break;\n                    case DbSearcher.BINARY_ALGORITHM:\n                        method = searcher.getClass().getMethod("binarySearch", String.class);\n                        break;\n                    case DbSearcher.MEMORY_ALGORITYM:\n                        method = searcher.getClass().getMethod("memorySearch", String.class);\n                        break;\n                }\n\n                DataBlock dataBlock = null;\n                if (Util.isIpAddress(ip) == false) {\n                    System.out.println("Error: Invalid ip address");\n                }\n\n                dataBlock = (DataBlock) method.invoke(searcher, ip);\n\n                return dataBlock.getRegion();\n\n            } catch (Exception e) {\n               // e.printStackTrace();\n            }\n        }catch (Exception e) {\n            //e.printStackTrace();\n        }finally {\n\n        }\n\n        return null;\n    }\n    public static void main(String[] args)  throws Exception{\n        System.err.println(getCityInfo("127.0.0.1"));\n        System.err.println(getCityInfo("17.1.1.3"));\n    }\n}\n')])])]),t("h2",{attrs:{id:"java-http请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-http请求"}},[n._v("#")]),n._v(" Java-Http请求")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/**\n * HTTP 请求模板\n * @return\n */\n@Bean("restTemplate")\npublic RestTemplate restTemplate() {\n    SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();\n\n    //单位为ms\n    factory.setReadTimeout(60000);\n    factory.setConnectTimeout(60000);\n    return new RestTemplate(factory);\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@RestController\n@RequestMapping("/data")\npublic class DataHandleController {\n\n\t@Autowired\n    RestTemplate restTemplate;\n\n    @RequestMapping("/getData")\n    public ResultMap getData() {\n        String url = "https://ldjsc.data.suqian.gov.cn//internalProcess/analyse/queryList";\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n//      设置请求参数\n        HashMap<String, Object> map = new HashMap<>();\n        map.put("authCode", "1");\n        //用HttpEntity封装整个请求报文\n        HttpEntity<HashMap<String, Object>> request = new HttpEntity<>(map, headers);\n\n//        开始调用\n//        参数1：目标请求地址\n//        参数2：请求体\n//        参数3：目标请求接口的返回值类型（execute接口的返回值类型）\n        Map resultMap = restTemplate.postForObject(url, request, Map.class);\n        List<Map> dataList = (List<Map>) resultMap.get("data");\n\n        List<Map> mapResult = new ArrayList<>();\n\n        for (Map parentMap : dataList) {\n            List<Map> mapList = (List<Map>) parentMap.get("judgmentList");\n            //获取parentMap名称\n            String name = (String) parentMap.get("name");\n            for (Map sonMap : mapList) {\n                sonMap.put("name",name);\n                mapResult.add(sonMap);\n            }\n        }\n        List<Map> sellAmount = mapResult.stream().sorted(Comparator.comparing((Map x) -> (Integer) x.get("id")).reversed()).collect(Collectors.toList());\n        return Result.success(sellAmount);\n    }\n')])])]),t("h2",{attrs:{id:"java-geojson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-geojson"}},[n._v("#")]),n._v(" Java-GeoJson")]),n._v(" "),t("blockquote",[t("p",[n._v("Java读取geojson格式文件数据")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' @RequestMapping("/getGeoJsonData")\n    public ResultMap getGeoJsonData(){\n        //读取文件\n        File file=new File("D:\\\\documents\\\\work\\\\shimen.geojson");\n        //读取文件中的数据保存在String\n        String content= null;\n        try {\n            content = FileUtils.readFileToString(file,"UTF-8");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //将String 转成Map对象\n            Map map =  JSONObject.parseObject(content.trim());\n            //获取key为 features的值\n            List<Map> features = (List<Map>) map.get("features");\n            //resultMapList 用来封装最终需要的数据\n            List<Map> resultMapList = new ArrayList<>();\n            //遍历features中的map\n            for (Map feature :features){\n                Map geometry = (Map) feature.get("geometry");\n                Map properties = (Map) feature.get("properties");\n                geometry.put("XZQMC", properties.get("XZQMC"));\n                resultMapList.add(geometry);\n            }\n        return Result.success(resultMapList);\n    }\n')])])]),t("h2",{attrs:{id:"jwt-工具类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt-工具类"}},[n._v("#")]),n._v(" JWT-工具类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.2.0</version>\n        </dependency>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/**\n * @Author lichengcan\n * @Date 2020/3/1 09:18\n * @Version 1.0\n **/\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Date;\npublic class JWTUtils {\n    /**\n     * 过期时间6小时\n     */\n    private static final long EXPIRE_TIME = 6 * 60 * 60 * 1000;\n\n    /**\n     * 校验token是否正确\n     *\n     * @param token  密钥\n     * @param secret 用户的密码\n     * @return 是否正确\n     */\n    public static boolean verify(String token, String username, String secret) {\n        try {\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            JWTVerifier verifier = JWT.require(algorithm)\n                    .withClaim("username", username)\n                    .build();\n            DecodedJWT jwt = verifier.verify(token);\n            return true;\n        } catch (Exception exception) {\n            return false;\n        }\n    }\n\n    /**\n     * 获得token中的信息无需secret解密也能获得\n     *\n     * @return token中包含的用户名\n     */\n    public static String getUsername(String token) {\n        try {\n            DecodedJWT jwt = JWT.decode(token);\n            return jwt.getClaim("username").asString();\n        } catch (JWTDecodeException e) {\n            return null;\n        }\n    }\n\n    /**\n     * 生成签名,2min后过期\n     *\n     * @param username 用户名\n     * @param secret   用户的密码\n     * @return 加密的token\n     */\n    public static String sign(String username, String secret) {\n        try {\n            Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            // 附带username信息\n            return JWT.create()\n                    .withClaim("username", username)\n                    .withExpiresAt(date)\n                    .sign(algorithm);\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        }\n    }\n\n    /**\n     * 判断过期\n     *\n     * @param token\n     * @return\n     */\n    public static boolean isExpire(String token) {\n        DecodedJWT jwt = JWT.decode(token);\n        return System.currentTimeMillis() > jwt.getExpiresAt().getTime();\n    }\n}\n')])])]),t("h2",{attrs:{id:"验证码-工具类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证码-工具类"}},[n._v("#")]),n._v(" 验证码-工具类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package com.coderman.api.common.utils;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Random;\n\n/**\n * 随机字符验证码生成工具类\n * @author Exrickx\n */\n/**\n * Created by lichengcan on 2019/12/18 15:38\n */\npublic class CreateVerifyCode {\n        /**\n         * 图片的宽度\n         */\n        private int width = 160;\n        /**\n         * 图片的高度\n         */\n        private int height = 40;\n        /**\n         * 验证码字符个数\n         */\n        private int codeCount = 4;\n        /**\n         * 验证码干扰线数\n         */\n        private int lineCount = 20;\n        /**\n         * 验证码\n         */\n        private String code = null;\n        /**\n         * 验证码图片Buffer\n         */\n        private BufferedImage buffImg = null;\n\n        Random random = new Random();\n\n        public CreateVerifyCode() {\n            creatImage();\n        }\n\n        public CreateVerifyCode(int width, int height) {\n            this.width = width;\n            this.height = height;\n            creatImage();\n        }\n\n        public CreateVerifyCode(int width, int height, int codeCount) {\n            this.width = width;\n            this.height = height;\n            this.codeCount = codeCount;\n            creatImage();\n        }\n\n        public CreateVerifyCode(int width, int height, int codeCount, int lineCount) {\n            this.width = width;\n            this.height = height;\n            this.codeCount = codeCount;\n            this.lineCount = lineCount;\n            creatImage();\n        }\n\n        public CreateVerifyCode(int width, int height, int codeCount, int lineCount, String code) {\n            this.width = width;\n            this.height = height;\n            this.codeCount = codeCount;\n            this.lineCount = lineCount;\n            creatImage(code);\n        }\n\n        /**\n         * 生成图片\n         */\n        private void creatImage() {\n            // 字体的宽度\n            int fontWidth = width / codeCount;\n            // 字体的高度\n            int fontHeight = height - 5;\n            int codeY = height - 8;\n\n            // 图像buffer\n            buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n            Graphics g = buffImg.getGraphics();\n            //Graphics2D g = buffImg.createGraphics();\n            // 设置背景色\n            g.setColor(getRandColor(200, 250));\n            g.fillRect(0, 0, width, height);\n\n            // 设置字体\n            //Font font1 = getFont(fontHeight);\n            Font font = new Font("Fixedsys", Font.BOLD, fontHeight);\n            g.setFont(font);\n\n            // 设置干扰线\n            for (int i = 0; i < lineCount; i++) {\n                int xs = random.nextInt(width);\n                int ys = random.nextInt(height);\n                int xe = xs + random.nextInt(width);\n                int ye = ys + random.nextInt(height);\n                g.setColor(getRandColor(1, 255));\n                g.drawLine(xs, ys, xe, ye);\n            }\n\n            // 添加噪点\n            float yawpRate = 0.01f;// 噪声率\n            int area = (int) (yawpRate * width * height);\n            for (int i = 0; i < area; i++) {\n                int x = random.nextInt(width);\n                int y = random.nextInt(height);\n\n                buffImg.setRGB(x, y, random.nextInt(255));\n            }\n\n            String str1 = randomStr(codeCount);// 得到随机字符\n            this.code = str1;\n            for (int i = 0; i < codeCount; i++) {\n                String strRand = str1.substring(i, i + 1);\n                g.setColor(getRandColor(1, 255));\n                // g.drawString(a,x,y);\n                // a为要画出来的东西，x和y表示要画的东西最左侧字符的基线位于此图形上下文坐标系的 (x, y) 位置处\n                g.drawString(strRand, i*fontWidth+3, codeY);\n            }\n\n        }\n\n        /**\n         * 生成指定字符图片\n         */\n        private void creatImage(String code) {\n            // 字体的宽度\n            int fontWidth = width / codeCount;\n            // 字体的高度\n            int fontHeight = height - 5;\n            int codeY = height - 8;\n\n            // 图像buffer\n            buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n            Graphics g = buffImg.getGraphics();\n            //Graphics2D g = buffImg.createGraphics();\n            // 设置背景色\n            g.setColor(getRandColor(200, 250));\n            g.fillRect(0, 0, width, height);\n\n            // 设置字体\n            //Font font1 = getFont(fontHeight);\n            Font font = new Font("Fixedsys", Font.BOLD, fontHeight);\n            g.setFont(font);\n\n            // 设置干扰线\n            for (int i = 0; i < lineCount; i++) {\n                int xs = random.nextInt(width);\n                int ys = random.nextInt(height);\n                int xe = xs + random.nextInt(width);\n                int ye = ys + random.nextInt(height);\n                g.setColor(getRandColor(1, 255));\n                g.drawLine(xs, ys, xe, ye);\n            }\n\n            // 添加噪点\n            float yawpRate = 0.01f;// 噪声率\n            int area = (int) (yawpRate * width * height);\n            for (int i = 0; i < area; i++) {\n                int x = random.nextInt(width);\n                int y = random.nextInt(height);\n\n                buffImg.setRGB(x, y, random.nextInt(255));\n            }\n\n            this.code = code;\n            for (int i = 0; i < code.length(); i++) {\n                String strRand = code.substring(i, i + 1);\n                g.setColor(getRandColor(1, 255));\n                // g.drawString(a,x,y);\n                // a为要画出来的东西，x和y表示要画的东西最左侧字符的基线位于此图形上下文坐标系的 (x, y) 位置处\n                g.drawString(strRand, i*fontWidth+3, codeY);\n            }\n\n        }\n\n        /**\n         * 得到随机字符\n         * @param n\n         * @return\n         */\n        public String randomStr(int n) {\n            String str1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";\n            String str2 = "";\n            int len = str1.length() - 1;\n            double r;\n            for (int i = 0; i < n; i++) {\n                r = (Math.random()) * len;\n                str2 = str2 + str1.charAt((int) r);\n            }\n            return str2;\n        }\n\n        /**\n         * 得到随机颜色\n         * @param fc\n         * @param bc\n         * @return\n         */\n        private Color getRandColor(int fc, int bc) {\n            // 给定范围获得随机颜色\n            if (fc > 255){\n                fc = 255;\n            }\n            if (bc > 255){\n                bc = 255;\n            }\n            int r = fc + random.nextInt(bc - fc);\n            int g = fc + random.nextInt(bc - fc);\n            int b = fc + random.nextInt(bc - fc);\n            return new Color(r, g, b);\n        }\n\n        /**\n         * 产生随机字体\n         */\n        private Font getFont(int size) {\n            Random random = new Random();\n            Font font[] = new Font[5];\n            font[0] = new Font("Ravie", Font.PLAIN, size);\n            font[1] = new Font("Antique Olive Compact", Font.PLAIN, size);\n            font[2] = new Font("Fixedsys", Font.PLAIN, size);\n            font[3] = new Font("Wide Latin", Font.PLAIN, size);\n            font[4] = new Font("Gill Sans Ultra Bold", Font.PLAIN, size);\n            return font[random.nextInt(5)];\n        }\n\n        // 扭曲方法\n        private void shear(Graphics g, int w1, int h1, Color color) {\n            shearX(g, w1, h1, color);\n            shearY(g, w1, h1, color);\n        }\n\n        private void shearX(Graphics g, int w1, int h1, Color color) {\n\n            int period = random.nextInt(2);\n\n            boolean borderGap = true;\n            int frames = 1;\n            int phase = random.nextInt(2);\n\n            for (int i = 0; i < h1; i++) {\n                double d = (double) (period >> 1)\n                        * Math.sin((double) i / (double) period\n                        + (6.2831853071795862D * (double) phase)\n                        / (double) frames);\n                g.copyArea(0, i, w1, 1, (int) d, 0);\n                if (borderGap) {\n                    g.setColor(color);\n                    g.drawLine((int) d, i, 0, i);\n                    g.drawLine((int) d + w1, i, w1, i);\n                }\n            }\n\n        }\n\n        private void shearY(Graphics g, int w1, int h1, Color color) {\n\n            int period = random.nextInt(40) + 10; // 50;\n\n            boolean borderGap = true;\n            int frames = 20;\n            int phase = 7;\n            for (int i = 0; i < w1; i++) {\n                double d = (double) (period >> 1)\n                        * Math.sin((double) i / (double) period\n                        + (6.2831853071795862D * (double) phase)\n                        / (double) frames);\n                g.copyArea(i, 0, 1, h1, 0, (int) d);\n                if (borderGap) {\n                    g.setColor(color);\n                    g.drawLine(i, (int) d, i, 0);\n                    g.drawLine(i, (int) d + h1, i, h1);\n                }\n\n            }\n\n        }\n\n        public void write(OutputStream sos) throws IOException {\n            ImageIO.write(buffImg, "png", sos);\n            sos.close();\n        }\n\n        public BufferedImage getBuffImg() {\n            return buffImg;\n        }\n\n        public String getCode() {\n            return code.toLowerCase();\n        }\n}\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);