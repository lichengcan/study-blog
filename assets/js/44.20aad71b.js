(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{453:function(n,t,o){"use strict";o.r(t);var e=o(2),r=Object(e.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h4",{attrs:{id:"_1-雪花算法生成long类型id-bigint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-雪花算法生成long类型id-bigint"}},[this._v("#")]),this._v(" 1 雪花算法生成Long类型id（bigint）")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('package com.example.norepeatsubmit.utils;\n\nimport cn.hutool.core.lang.Snowflake;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.util.IdUtil;\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\n\n/**\n * @author lichengcan\n * @Desc 雪花算法\n * @Date: 2022/12/5\n */\n@Component\npublic class IdGeneratorSnowflake {\n\n    private Logger log = LoggerFactory.getLogger(IdGeneratorSnowflake.class);\n\n    /**\n     * 第几号机房\n     */\n    private long workerId = 0;\n    /**\n     * 第几号机器\n     */\n    private long datacenterId = 1;\n    private Snowflake snowflake = IdUtil.getSnowflake(workerId, datacenterId);\n\n    /**\n     * 构造后开始执行，加载初始化工作\n     */\n    @PostConstruct\n    public void init() {\n        try {\n            //获取本机的ip地址编码\n            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());\n            log.info("当前机器的workerId: " + workerId);\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.warn("当前机器的workerId获取失败 ----\x3e " + e);\n            workerId = NetUtil.getLocalhostStr().hashCode();\n        }\n    }\n\n    public synchronized Long snowflakeId() {\n        return snowflake.nextId();\n    }\n\n}\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);