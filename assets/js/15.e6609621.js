(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{462:function(n,t,e){"use strict";e.r(t);var a=e(2),r=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"_1、什么是arraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是arraylist"}},[n._v("#")]),n._v(" 1、什么是ArrayList")]),n._v(" "),t("p",[n._v("ArrayList就是 动态数组，它提供了\n①动态的增加和减少元素\n②实现了ICollection和IList接口")]),n._v(" "),t("p",[n._v("③灵活的设置数组的大小")]),n._v(" "),t("p",[n._v("ArrayList是一个其容量能够动态增长的动态数组。它继承了AbstractList，实现了List、RandomAccess, Cloneable, java.io.Serializable。\n基本的ArrayList，长于随机访问元素，但是在List中间插入和移除元素时较慢。同时，ArrayList的操作不是线程安全的！\n一般在单线程中才使用ArrayList，而在多线程中一般使用Vector或者CopyOnWriteArrayList。")]),n._v(" "),t("h3",{attrs:{id:"_2、如何使用arraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何使用arraylist"}},[n._v("#")]),n._v(" 2、如何使用ArrayList")]),n._v(" "),t("p",[n._v("最简单的例子：")]),n._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("  \n            a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("nextInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//为数组增加int型数")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//remove优先调用索引")]),n._v("\n\ta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//删除第一个元素；")]),n._v("\n\ta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//在数组末尾添加")]),n._v("\n    a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 在指定位置添加元素，在第5个位置添加2   ")]),n._v("\n    a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 删除指定位置上的元素                ")]),n._v("\n\ta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 删除指定元素")]),n._v("\n\ta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("clear")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 清空ArrayList         ")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"ArrayList contains 5 is: "')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("contains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断arrayList是否包含5        ")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"ArrayList is empty: "')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断ArrayList是否为空  ")]),n._v("\n")])])]),t("h3",{attrs:{id:"_3、arraylist有三种遍历方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、arraylist有三种遍历方式"}},[n._v("#")]),n._v(" 3、ArrayList有三种遍历方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('迭代器遍历\nIterator<Integer> it = arrayList.iterator();\nwhile(it.hasNext()){\n    System.out.print(it.next() + " ");\n} \n \n索引值遍历\nfor(int i = 0; i < arrayList.size(); i++){\n   System.out.print(arrayList.get(i) + " ");\n}\n \nfor循环遍历//改变number并不会改变arrayList本身？\nfor(Integer number : arrayList){\n   System.out.print(number + " ");\n}\n遍历ArrayList时，通过索引值遍历效率最高，for循环遍历次之，迭代器遍历最低\n')])])]),t("h4",{attrs:{id:"_3-1-遍历时并发修改问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-遍历时并发修改问题"}},[n._v("#")]),n._v(" 3.1 遍历时并发修改问题")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('        //迭代器遍历\n        Iterator<Integer> iterator = list.iterator();\n        while(iterator.hasNext()){\n            System.out.println("iterator = " + iterator.next());\n            //不能使用集合的方法进行添加和删除\n\t\t\tlist.remove();//汇报并发修改异常的错误\n            //对于删除可以使用迭代器自带的remove\n            if(iterator.next().equals("需要删除的元素")){\n                iterator.remove();\n            }\n        }\n        //迭代器添加\n        ListIterator<Integer> integerListIterator = list.listIterator();\n        while (integerListIterator.hasNext()) {\n            //列表迭代器添加了一个 add方法\n            integerListIterator.add(123);\n        }\n')])])]),t("h3",{attrs:{id:"_4、toarray用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、toarray用法"}},[n._v("#")]),n._v(" 4、toArray用法")]),n._v(" "),t("p",[n._v("有时候，当我们调用ArrayList中的 toArray()，可能遇到过抛出java.lang.ClassCastException异常的情况，这是由于toArray() 返回的是 Object[] 数组，将 Object[] 转换为其它类型(如，将Object[]转换为的Integer[])则会抛出java.lang.ClassCastException异常，因为Java不支持向下转型。")]),n._v(" "),t("p",[n._v("所以一般更常用的是使用另外一种方法进行使用：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" <T> T[] toArray(T[] a)\n调用toArray(T[] a)返回T[]可通以下方式进行实现：\n \n // toArray用法\n // 第一种方式(最常用)\n Integer[] integer = arrayList.toArray(new Integer[0]);\n \n \n // 第二种方式(容易理解)\n Integer[] integer1 = new Integer[arrayList.size()];\n arrayList.toArray(integer1);\n \n \n // 抛出异常，java不支持向下转型\n //Integer[] integer2 = new Integer[arrayList.size()];\n //integer2 = arrayList.toArray();\nArrayList<Integer> a = new  ArrayList<Integer>();  \n \n")])])]),t("h3",{attrs:{id:"_5、用法示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、用法示例"}},[n._v("#")]),n._v(" 5、用法示例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import java.util.ArrayList;\nimport java.util.Iterator;\n \npublic class ArrayListDemo {\n \n    public static void main(String[] srgs){\n         ArrayList<Integer> arrayList = new ArrayList<Integer>();\n \n         System.out.printf("Before add:arrayList.size() = %d\\n",arrayList.size());\n \n         arrayList.add(1);\n         arrayList.add(3);\n         arrayList.add(5);\n         arrayList.add(7);\n         arrayList.add(9);\n         System.out.printf("After add:arrayList.size() = %d\\n",arrayList.size());\n \n         System.out.println("Printing elements of arrayList");\n         // 三种遍历方式打印元素\n         // 第一种：通过迭代器遍历\n         System.out.print("通过迭代器遍历:");\n         Iterator<Integer> it = arrayList.iterator();\n         while(it.hasNext()){\n             System.out.print(it.next() + " ");\n         }\n         System.out.println();\n \n         // 第二种：通过索引值遍历\n         System.out.print("通过索引值遍历:");\n         for(int i = 0; i < arrayList.size(); i++){\n             System.out.print(arrayList.get(i) + " ");\n         }\n         System.out.println();\n \n         // 第三种：for循环遍历\n         System.out.print("for循环遍历:");\n         for(Integer number : arrayList){\n             System.out.print(number + " ");\n         }\n \n         // toArray用法\n         // 第一种方式(最常用)\n         Integer[] integer = arrayList.toArray(new Integer[0]);\n \n         // 第二种方式(容易理解)\n         Integer[] integer1 = new Integer[arrayList.size()];\n         arrayList.toArray(integer1);\n \n         // 抛出异常，java不支持向下转型\n         //Integer[] integer2 = new Integer[arrayList.size()];\n         //integer2 = arrayList.toArray();\n         System.out.println();\n \n         // 在指定位置添加元素\n         arrayList.add(2,2);\n         // 删除指定位置上的元素\n         arrayList.remove(2);    \n         // 删除指定元素\n         arrayList.remove((Object)3);\n         // 判断arrayList是否包含5\n         System.out.println("ArrayList contains 5 is: " + arrayList.contains(5));\n \n         // 清空ArrayList\n         arrayList.clear();\n         // 判断ArrayList是否为空\n         System.out.println("ArrayList is empty: " + arrayList.isEmpty());\n    }\n}\n/**\nBefore add:arrayList.size() = 0\nAfter add:arrayList.size() = 5\nPrinting elements of arrayList\n通过迭代器遍历:1 3 5 7 9 \n通过索引值遍历:1 3 5 7 9 \nfor循环遍历:1 3 5 7 9 \nArrayList contains 5 is: true\nArrayList is empty: true\n*/\n')])])]),t("h3",{attrs:{id:"_6、arraylist源码解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、arraylist源码解析"}},[n._v("#")]),n._v(" 6、ArrayList源码解析")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package java.util;\n \npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    // 序列版本号\n    private static final long serialVersionUID = 8683452581122892189L;\n \n    // 默认容量大小\n    private static final int DEFAULT_CAPACITY = 10;\n \n    // 空数组\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n \n    // 用于保存ArrayList中数据的数组\n    private transient Object[] elementData;\n \n    // ArrayList中所包含元素的个数\n    private int size;\n \n    // 带初始容量参数的构造函数\n    public ArrayList(int initialCapacity) {\n        super();\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException("Illegal Capacity: "+\n                                               initialCapacity);\n        this.elementData = new Object[initialCapacity];\n    }\n \n    // 默认构造函数，其默认初始容量为10\n    public ArrayList() {\n        super();\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n \n    // 带Collection参数的构造函数\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        size = elementData.length;\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    }\n \n    // 将此 ArrayList 实例的容量调整为列表的当前大小(实际元素个数)\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = Arrays.copyOf(elementData, size);\n        }\n    }\n \n    // 如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所\n    // 指定的元素数\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != EMPTY_ELEMENTDATA)\n            // any size if real element table\n            ? 0\n            // larger than default for empty table. It\'s already supposed to be\n            // at default size.\n            : DEFAULT_CAPACITY;\n \n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n \n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n \n        ensureExplicitCapacity(minCapacity);\n    }\n \n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n \n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n \n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n \n \n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n \n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n \n    // 返回ArrayList中的元素个数\n    public int size() {\n        return size;\n    }\n \n    // 判断ArrayList是否为空\n    public boolean isEmpty() {\n        return size == 0;\n    }\n \n    // 判断ArrayList是否包含Object(o)\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n \n    // 返回ArrayList中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n \n    // 返回ArrayList中最后一次出现的指定元素的索引，或如果此列表不包含索引，则返回 -1\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n \n    // 返回此 ArrayList 实例的浅表副本\n    public Object clone() {\n        try {\n            @SuppressWarnings("unchecked")\n            ArrayList<E> v = (ArrayList<E>) super.clone();\n            // 将当前ArrayList的全部元素拷贝到v中\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn\'t happen, since we are Cloneable\n            throw new InternalError();\n        }\n    }\n \n    // 按适当顺序（从第一个到最后一个元素）返回包含此列表中所有元素的数组\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n \n    // 返回ArrayList的模板数组。所谓模板数组，即可以将T设为任意的数据类型\n    @SuppressWarnings("unchecked")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a\'s runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n \n    // 位置访问操作   \n    @SuppressWarnings("unchecked")\n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n \n    // 返回ArrayList中指定位置上的元素\n    public E get(int index) {\n        rangeCheck(index);\n \n        return elementData(index);\n    }\n \n    // 用指定的元素替代ArrayList中指定位置上的元素，并返回替代前的元素\n    public E set(int index, E element) {\n        rangeCheck(index);\n \n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n \n    // 将指定的元素添加到ArrayList的尾部\n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n \n    // 将指定的元素插入ArrayList中的指定位置\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n \n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }\n \n    // 移除ArrayList中指定位置上的元素，并返回该位置上的元素\n    public E remove(int index) {\n        rangeCheck(index);\n \n        modCount++;\n        E oldValue = elementData(index);\n \n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n \n        return oldValue;\n    }\n \n    // 移除ArrayList中首次出现的指定元素（如果存在则移除并返回true，否则返回false）\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n \n    // 私有方法，用于快速移除\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n \n    // 移除ArrayList中的所有元素\n    public void clear() {\n        modCount++;\n \n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n \n        size = 0;\n    }\n \n    // 按照指定 collection 的迭代器所返回的元素顺序，\n    // 将该 collection 中的所有元素添加到ArrayList的尾部\n    public boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n \n    // 从指定的位置开始，将指定 collection 中的所有元素插入到ArrayList中\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n \n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n \n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n \n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n \n    // 移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素\n    protected void removeRange(int fromIndex, int toIndex) {\n        modCount++;\n        int numMoved = size - toIndex;\n        System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                         numMoved);\n \n        // clear to let GC do its work\n        int newSize = size - (toIndex-fromIndex);\n        for (int i = newSize; i < size; i++) {\n            elementData[i] = null;\n        }\n        size = newSize;\n    }\n \n    // 私有方法，用于范围检测\n    private void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n \n    // 私有方法，用于add和addAll\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n \n \n    private String outOfBoundsMsg(int index) {\n        return "Index: "+index+", Size: "+size;\n    }\n \n    // 移除ArrayList中Collection所包含的所有元素\n    public boolean removeAll(Collection<?> c) {\n        return batchRemove(c, false);\n    }\n \n    // 保留所有ArrayList和Collection共有的元素\n    public boolean retainAll(Collection<?> c) {\n        return batchRemove(c, true);\n    }\n \n    private boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            // Preserve behavioral compatibility with AbstractCollection,\n            // even if c.contains() throws.\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                                 elementData, w,\n                                 size - r);\n                w += size - r;\n            }\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        return modified;\n    }\n \n    // java.io.Serializable的写入函数\n    // 将ArrayList的“容量，所有的元素值”都写入到输出流中\n    private void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException{\n        // Write out element count, and any hidden stuff\n        int expectedModCount = modCount;\n        s.defaultWriteObject();\n \n        // Write out size as capacity for behavioural compatibility with clone()\n        s.writeInt(size);\n \n        // Write out all elements in the proper order.\n        for (int i=0; i<size; i++) {\n            s.writeObject(elementData[i]);\n        }\n \n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n \n    // java.io.Serializable的读取函数：根据写入方式读出\n    // 先将ArrayList的“容量”读出，然后将“所有的元素值”读出\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        elementData = EMPTY_ELEMENTDATA;\n \n        // Read in size, and any hidden stuff\n        s.defaultReadObject();\n \n        // Read in capacity\n        s.readInt(); // ignored\n \n        if (size > 0) {\n            // be like clone(), allocate array based upon size not capacity\n            ensureCapacityInternal(size);\n \n            Object[] a = elementData;\n            // Read in all elements in the proper order.\n            for (int i=0; i<size; i++) {\n                a[i] = s.readObject();\n            }\n        }\n    }\n \n    // 返回一个从指定位置开始遍历的ListIterator迭代器\n    public ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > size)\n            throw new IndexOutOfBoundsException("Index: "+index);\n        return new ListItr(index);\n    }\n \n    // 返回一个ListIterator迭代器\n    public ListIterator<E> listIterator() {\n        return new ListItr(0);\n    }\n \n    // 返回一个Iterator迭代器\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n \n    // 返回一个指定范围的子List列表\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);