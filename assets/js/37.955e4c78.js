(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{440:function(a,e,n){"use strict";n.r(e);var t=n(2),r=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"kafka"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[a._v("#")]),a._v(" kafka")]),a._v(" "),e("h3",{attrs:{id:"_1-window-安装-kafka"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-window-安装-kafka"}},[a._v("#")]),a._v(" 1 window 安装 kafka")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://kafka.apache.org/downloads",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://kafka.apache.org/downloads"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"_2-启动zookeeper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动zookeeper"}},[a._v("#")]),a._v(" 2 启动Zookeeper")]),a._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("bin\\windows\\zookeeper-server-start.bat config\\zookeeper.properties \n")])])]),e("h3",{attrs:{id:"_3-启动kafka服务端命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-启动kafka服务端命令"}},[a._v("#")]),a._v(" 3 启动kafka服务端命令")]),a._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("bin\\windows\\kafka-server-start.bat config\\server.properties\n")])])]),e("h3",{attrs:{id:"_4-生产者-发送信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-生产者-发送信息"}},[a._v("#")]),a._v(" 4 生产者-发送信息")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('/**\n * kafka信息管理\n *\n * @author zhengwen\n **/\n@Slf4j\n@RestController\n@RequestMapping("/kafka/push")\npublic class KafkaPushController {\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n\n    /**\n     * kafka的信息push发送\n     *\n     * @param kafkaMessageVo kafka信息对象\n     * @return 推送结果\n     */\n    @PostMapping("/sendMsg")\n    public void sendMsg(@RequestBody KafkaMessageVo kafkaMessageVo) {\n        String topic = kafkaMessageVo.getTopic();\n        String msg = kafkaMessageVo.getMessage();\n        //SpringBoot3的写法\n        CompletableFuture<SendResult<String, Object>> completableFuture = kafkaTemplate.send(topic, UUID.randomUUID().toString(), msg);\n        //执行成功回调\n        completableFuture.thenAccept(result -> {\n            log.info("发送成功:{}", JSONUtil.toJsonStr(kafkaMessageVo));\n        });\n        //执行失败回调\n        completableFuture.exceptionally(e -> {\n            log.info("发送失败", JSONUtil.toJsonStr(kafkaMessageVo), e);\n            return null;\n        });\n    }\n}\n')])])]),e("h3",{attrs:{id:"_5-消费者-消费信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-消费者-消费信息"}},[a._v("#")]),a._v(" 5 消费者-消费信息")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('/**\n * @author lichengcan\n */\n@Component\n@Slf4j\npublic class KafkaMessageConsumer {\n\n    /**\n     * kafka的信息消费\n     * @param record\n     */\n    @KafkaListener(topics = "${xiaocan.analyze.device.flow.topic.consumer}", groupId = "dc-device-flow-analyze-0228")\n    public void consumeMessage(ConsumerRecord<String, String> record) {\n        String key = record.key();\n        String value = record.value();\n        String topic = record.topic();\n        int partition = record.partition();\n        long offset = record.offset();\n\n        log.info("开始消费");\n        log.info("Topic: " + topic);\n        log.info("Partition: " + partition);\n        log.info("Offset: " + offset);\n        log.info("Key: " + key);\n        log.info("Value: " + value);\n    }\n}\n')])])]),e("h3",{attrs:{id:"_6-kafka配置信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-kafka配置信息"}},[a._v("#")]),a._v(" 6 kafka配置信息")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  #kafka配置\n  kafka:\n    bootstrap-servers: localhost:9092\n    client-id: dc-device-flow-analyze\n    consumer:\n      group-id: dc-device-flow-analyze-0228\n      max-poll-records: 10\n      #Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】\n      auto-offset-reset: earliest\n      #是否开启自动提交\n      enable-auto-commit: false\n      #自动提交的时间间隔\n      auto-commit-interval: 1000\n    producer:\n      acks: 1\n      batch-size: 4096\n      buffer-memory: 40960000\n      client-id: dc-device-flow-analyze-producer\n      compression-type: zstd\n      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer\n      retries: 3\n      properties:\n        spring.json.add.type.headers: false\n        max.request.size: 126951500\n    listener:\n      ack-mode: MANUAL_IMMEDIATE\n      concurrency: 1  #推荐设置为topic的分区数\n      type: BATCH #开启批量监听\n\n#消费topic配置\nxiaocan:\n  analyze:\n    device:\n      flow:\n        topic:\n          consumer: test\n")])])]),e("h3",{attrs:{id:"_7-maven依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-maven依赖"}},[a._v("#")]),a._v(" 7 maven依赖")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\x3c!--SpringBoot 3 整合kafka--\x3e\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);