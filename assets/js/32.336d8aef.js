(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{437:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"stream-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream-流"}},[t._v("#")]),t._v(" Stream 流")]),t._v(" "),a("h4",{attrs:{id:"_1-过滤之后放到list集合中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-过滤之后放到list集合中"}},[t._v("#")]),t._v(" 1 过滤之后放到List集合中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ArrayList<String> list1 = new ArrayList();\nCollections.addAll(list1, "蔡小小,29", "叶良辰,23", "刘不一,123", "吴妹,23", "谷哥,30", "肖肖,26");\n        //获取所有年龄大于24岁所有的人名\n        List<String> names = new ArrayList<>();\n        list1.stream()\n                .filter(s -> Integer.parseInt(s.split(",")[1])>24)\n                .map(s -> s.split(",")[0])\n                .forEach(names::add);\n        System.out.println("names = " + names);\n')])])]),a("h4",{attrs:{id:"_2-过滤之后放到map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-过滤之后放到map"}},[t._v("#")]),t._v(" 2 过滤之后放到Map")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('List<HashMap<String, Integer>> collect2 = list2.stream()\n        .filter(s -> Integer.parseInt(s.split(",")[1]) >= 25)\n        .map(s -> {\n            HashMap<String, Integer> hashMap = new HashMap();\n            hashMap.put(s.split(",")[0].toString(), Integer.parseInt(s.split(",")[1]));\n            return hashMap;\n        }).collect(Collectors.toList());\n')])])]),a("h4",{attrs:{id:"_4-流合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-流合并"}},[t._v("#")]),t._v(" 4 流合并")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Stream<String> concat = Stream.concat(stream1, stream2);\n")])])]),a("h4",{attrs:{id:"_5过滤放到实体类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5过滤放到实体类"}},[t._v("#")]),t._v(" 5过滤放到实体类")]),t._v(" "),a("h5",{attrs:{id:"_5-1-原始写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-原始写法"}},[t._v("#")]),t._v(" 5.1 原始写法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Stream<Actor> actorStream = concat.map(\n        new Function<String, Actor>() {\n            @Override\n            public Actor apply(String s) {\n                return new Actor(s.split(",")[0],Integer.parseInt(s.split(",")[1]));\n            }\n        }\n);\n')])])]),a("h5",{attrs:{id:"_5-2-简写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-简写"}},[t._v("#")]),t._v(" 5.2 简写")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Stream<Actor> actorStream = concat.map(s -> new Actor(s.split(",")[0], Integer.parseInt(s.split(",")[1])));\nfinal List<Actor> collect = actorStream.collect(Collectors.toList());\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);